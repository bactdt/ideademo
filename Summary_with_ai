// ==UserScript==
// @name         AIÁΩëÈ°µÂÜÖÂÆπÊÄªÁªì
// @namespace    https://linux.do/u/f-droid
// @version      3.1
// @description  ÊîØÊåÅÂ§öËØ≠Ë®ÄÂíå‰ΩøÁî®Ëá™ÂÆö‰πâAPIÊÄªÁªìÁΩëÈ°µÂÜÖÂÆπÁöÑAIÁΩëÈ°µÂÜÖÂÆπÊÄªÁªìËÑöÊú¨„ÄÇ
// @author       F-Droid,xbaxb
// @icon         https://linux.do/user_avatar/linux.do/f-droid/144/228666_2.png
// @match        *://*/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_xmlhttpRequest
// @connect      *
// @require      https://cdn.jsdelivr.net/npm/marked/marked.min.js
// @license      MIT
// ==/UserScript==

(function() {
    'use strict';

    const DEFAULT_CONFIG_NAME = 'ÈªòËÆ§ÈÖçÁΩÆ';
    const DEFAULT_CONFIG = {
        API_URL: 'https://api.openai.com/v1/chat/completions',
        API_KEY: 'yourapikey',
        MAX_TOKENS: 8192,
        MODEL: 'gpt-4o',
        TEMPERATURE: 0.5,
        PROMPT: 'ËØ∑ÊÄªÁªì‰ª•‰∏ãÂÜÖÂÆπÔºåÁÆÄË¶ÅÊ¶ÇÊã¨‰∏ªË¶ÅËßÇÁÇπÂíåÈáçË¶ÅÁªÜËäÇÔºå‰∏çË¶ÅËøõË°å‰ªª‰ΩïÂØπËØùÂΩ¢ÂºèÁöÑÂõûÁ≠î„ÄÇ',
        LANGUAGE: 'Ëá™Âä®',
        RETRY_COUNT: 3,
        RETRY_INTERVAL: 3000,
        DARK_MODE: false,
    };

    let CONFIGS = loadConfigs();
    let currentConfigName = getCurrentConfigName();
    let CONFIG = CONFIGS[currentConfigName] || DEFAULT_CONFIG;
    let lastSummaryMarkdown = '';

    // Á°Æ‰øùËÑöÊú¨Âè™Âú®È°∂Â±ÇÁ™óÂè£‰∏≠ËøêË°å
    if (window.top === window.self) {
        // Ê£ÄÊü•ÊåâÈíÆÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®
        let summaryButton = document.getElementById('summaryButton');
        let mainButton = document.getElementById('mainButton');

        if (!summaryButton) {
            summaryButton = document.createElement('button');
            summaryButton.id = 'summaryButton';
            summaryButton.textContent = 'ÊÄªÁªìÁΩëÈ°µ';
            summaryButton.style.position = 'fixed';
            summaryButton.style.bottom = '20px';
            summaryButton.style.right = '170px';
            summaryButton.style.backgroundColor = '#28A745';
            summaryButton.style.color = 'white';
            summaryButton.style.border = 'none';
            summaryButton.style.borderRadius = '5px';
            summaryButton.style.padding = '10px 20px';
            summaryButton.style.cursor = 'pointer';
            summaryButton.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
            summaryButton.style.zIndex = 1000;
            document.body.appendChild(summaryButton);
        }

        if (!mainButton) {
            mainButton = document.createElement('button');
            mainButton.id = 'mainButton';
            mainButton.textContent = 'ÊéßÂà∂Èù¢Êùø';
            mainButton.style.position = 'fixed';
            mainButton.style.bottom = '20px';
            mainButton.style.right = '40px';
            mainButton.style.backgroundColor = '#007BFF';
            mainButton.style.color = 'white';
            mainButton.style.border = 'none';
            mainButton.style.borderRadius = '5px';
            mainButton.style.padding = '10px 20px';
            mainButton.style.cursor = 'pointer';
            mainButton.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
            mainButton.style.zIndex = 1000;
            document.body.appendChild(mainButton);
        }
    }

    const panel = document.createElement('div');
    panel.style.display = 'none';
    panel.style.position = 'fixed';
    panel.style.top = '50%';
    panel.style.left = '50%';
    panel.style.transform = 'translate(-50%, -50%)';
    panel.style.backgroundColor = 'white';
    panel.style.padding = '20px';
    panel.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.3)';
    panel.style.zIndex = 1001;
    panel.style.width = '65%';
    panel.style.height = '65%';
    panel.style.borderRadius = '10px';
    panel.style.overflowY = 'auto';
    document.body.appendChild(panel);

    const mainView = document.createElement('div');
    mainView.style.display = 'flex';
    mainView.style.flexDirection = 'column';
    mainView.style.height = '100%';
    mainView.style.position = 'relative';

    const settingsView = document.createElement('div');
    settingsView.style.display = 'none';
    settingsView.style.width = '95%';
    settingsView.style.height = '85%';
    settingsView.style.margin = '0 auto';
    settingsView.style.overflowY = 'auto';
    settingsView.style.padding = '20px';
    settingsView.style.display = 'flex';
    settingsView.style.flexDirection = 'column';
    settingsView.style.alignItems = 'center';

    panel.appendChild(mainView);
    panel.appendChild(settingsView);

   
const createPanelHeader = (titleText, onClose) => {
        const header = document.createElement('div');
        header.style.display = 'flex';
        header.style.justifyContent = 'space-between';
        header.style.alignItems = 'center';

        const title = document.createElement('h3');
        title.textContent = titleText;
        title.style.marginBottom = '15px';
        title.style.textAlign = 'center';
        header.appendChild(title);

        const closeButton = document.createElement('button');
        closeButton.textContent = 'ÂÖ≥Èó≠';
        closeButton.style.backgroundColor = '#6C757D';
        closeButton.style.color = 'white';
        closeButton.style.border = 'none';
        closeButton.style.padding = '5px 10px';
        closeButton.style.borderRadius = '5px';
        closeButton.style.cursor = 'pointer';
        closeButton.addEventListener('click', onClose);
        header.appendChild(closeButton);

        return header;
    };

    mainView.appendChild(createPanelHeader('AIÊÄªÁªìÊéßÂà∂Èù¢Êùø', () => {
        panel.style.display = 'none';
    }));

    const buttonContainer = document.createElement('div');
    buttonContainer.style.display = 'flex';
    buttonContainer.style.justifyContent = 'center';
    buttonContainer.style.gap = '10px';
    buttonContainer.style.marginBottom = '15px';
    mainView.appendChild(buttonContainer);

    const panelSummaryButton = document.createElement('button');
    panelSummaryButton.textContent = 'Ëé∑ÂèñÁΩëÈ°µÊÄªÁªì';
    panelSummaryButton.style.backgroundColor = '#28A745';
    panelSummaryButton.style.color = 'white';
    panelSummaryButton.style.border = 'none';
    panelSummaryButton.style.padding = '10px 15px';
    panelSummaryButton.style.borderRadius = '5px';
    panelSummaryButton.style.cursor = 'pointer';
    buttonContainer.appendChild(panelSummaryButton);

    const settingsButton = document.createElement('button');
    settingsButton.textContent = 'ËÆæÁΩÆ';
    settingsButton.style.backgroundColor = '#FFC107';
    settingsButton.style.color = 'white';
    settingsButton.style.border = 'none';
    settingsButton.style.padding = '10px 15px';
    settingsButton.style.borderRadius = '5px';
    settingsButton.style.cursor = 'pointer';
    settingsButton.addEventListener('click', () => {
        mainView.style.display = 'none';
        settingsView.style.display = 'block';
    });
    buttonContainer.appendChild(settingsButton);

    const darkModeButton = document.createElement('button');
    darkModeButton.textContent = 'ÂàáÊç¢ÊöóËâ≤Ê®°Âºè';
    darkModeButton.style.backgroundColor = '#6C757D';
    darkModeButton.style.color = 'white';
    darkModeButton.style.border = 'none';
    darkModeButton.style.padding = '10px 15px';
    darkModeButton.style.borderRadius = '5px';
    darkModeButton.style.cursor = 'pointer';
    buttonContainer.appendChild(darkModeButton);

    const resultArea = document.createElement('div');
    resultArea.style.width = '100%';
    resultArea.style.flex = '1';
    resultArea.style.marginTop = '10px';
    resultArea.style.marginBottom = '15px'; 
    resultArea.style.borderRadius = '5px';
    resultArea.style.border = '1px solid #ced4da';
    resultArea.style.padding = '10px';
    resultArea.style.boxSizing = 'border-box';
    resultArea.style.overflowY = 'auto';
    mainView.appendChild(resultArea);

    const copyButton = document.createElement('button');
    copyButton.textContent = 'Â§çÂà∂ÊÄªÁªì';
    copyButton.style.backgroundColor = '#007BFF';
    copyButton.style.color = 'white';
    copyButton.style.border = 'none';
    copyButton.style.padding = '10px 20px';
    copyButton.style.marginTop = '10px';
    copyButton.style.marginBottom = '20px';
    copyButton.style.borderRadius = '5px';
    copyButton.style.cursor = 'pointer';
    mainView.appendChild(copyButton);

    const footer = document.createElement('div');
    footer.style.width = '100%';
    footer.style.textAlign = 'center';
    footer.style.padding = '10px';
    footer.style.marginTop = 'auto';
    footer.style.position = 'relative';
    footer.style.bottom = '0';
    footer.innerHTML = `¬© ${new Date().getFullYear()} <a href="https://linux.do/u/f-droid" target="_blank" style="color: #007BFF; text-decoration: none;">F-Droid</a>. All rights reserved.<br>Â¶ÇÊûúÊÇ®ÂñúÊ¨¢Ëøô‰∏™Â∑•ÂÖ∑ÔºåËØ∑Áªô‰ΩúËÄÖÁÇπ‰∏™ËµûÂêßÔºÅüòä`;
    mainView.appendChild(footer);

    settingsView.appendChild(createPanelHeader('ËÆæÁΩÆ', () => {
        settingsView.style.display = 'none';
        mainView.style.display = 'flex';
        mainView.style.flexDirection = 'column';
        mainView.style.height = '100%';
    }));

    const form = document.createElement('form');
    form.style.display = 'flex';
    form.style.flexDirection = 'column';
    form.style.rowGap = '10px';
    form.style.padding = '0 20px';
    form.style.maxWidth = '1000px';
    form.style.margin = '0 auto';
    settingsView.appendChild(form);

    const configSelectButton = document.createElement('button');
    configSelectButton.textContent = 'ÈÄâÊã©ÈÖçÁΩÆ';
    configSelectButton.style.backgroundColor = '#007BFF';
    configSelectButton.style.color = 'white';
    configSelectButton.style.border = 'none';
    configSelectButton.style.padding = '10px 20px';
    configSelectButton.style.borderRadius = '5px';
    configSelectButton.style.cursor = 'pointer';
    configSelectButton.style.marginTop = '15px';
    configSelectButton.style.marginBottom = '10px';
    configSelectButton.addEventListener('click', () => {
        showConfigSelectDialog();
    });
    form.appendChild(configSelectButton);

    const createInputField = (labelText, inputName, inputType = 'text', placeholder = '', value = '') => {
        const fieldContainer = document.createElement('div');
        fieldContainer.style.display = 'flex';
        fieldContainer.style.flexDirection = 'column';
        fieldContainer.style.marginBottom = '15px';
        fieldContainer.style.position = 'relative';

        const label = document.createElement('label');
        label.textContent = labelText;
        label.htmlFor = inputName;
        label.style.marginBottom = '5px';

        const input = document.createElement('input');
        input.type = inputType;
        input.name = inputName;
        input.placeholder = placeholder;
        input.value = value;
        input.style.padding = '10px';
        input.style.border = '1px solid #ced4da';
        input.style.borderRadius = '5px';
        input.style.width = '100%';
        input.style.boxSizing = 'border-box';

        if (inputName === 'api_key') {
            const toggleVisibilityButton = document.createElement('button');
            toggleVisibilityButton.textContent = 'üëÅÔ∏è';
            toggleVisibilityButton.style.position = 'absolute';
            toggleVisibilityButton.style.right = '10px';
            toggleVisibilityButton.style.top = '35px';
            toggleVisibilityButton.style.border = 'none';
            toggleVisibilityButton.style.background = 'none';
            toggleVisibilityButton.style.cursor = 'pointer';
            toggleVisibilityButton.addEventListener('click', (event) => {
                event.preventDefault();
                input.type = input.type === 'password' ? 'text' : 'password';
            });
            fieldContainer.appendChild(toggleVisibilityButton);
        }

        fieldContainer.appendChild(label);
        fieldContainer.appendChild(input);

        return fieldContainer;
    };

    form.appendChild(createInputField('APIÂú∞ÂùÄ', 'api_url', 'text', 'ËØ∑ËæìÂÖ•ÊÇ®ÁöÑAPIÂú∞ÂùÄ', CONFIG.API_URL));
    form.appendChild(createInputField('APIÂØÜÈí•', 'api_key', 'password', 'ËØ∑ËæìÂÖ•ÊÇ®ÁöÑAPIÂØÜÈí•', CONFIG.API_KEY));
    form.appendChild(createInputField('AIÊ®°Âûã', 'model', 'text', 'ËØ∑ËæìÂÖ•AIÊ®°ÂûãÂêçÁß∞', CONFIG.MODEL));
    form.appendChild(createInputField('ÊúÄÂ§ßÂ≠óÊï∞', 'max_tokens', 'number', 'ËØ∑ËæìÂÖ•ÊúÄÂ§ßÂ≠óÊï∞', CONFIG.MAX_TOKENS));
    form.appendChild(createInputField('Ê∏©Â∫¶', 'temperature', 'number', 'ËØ∑ËæìÂÖ•Ê∏©Â∫¶Ôºà0Âà∞1‰πãÈó¥Ôºâ', CONFIG.TEMPERATURE));
    form.appendChild(createInputField('ÊèêÁ§∫ËØç', 'prompt', 'text', 'ËØ∑ËæìÂÖ•Êñ∞ÁöÑÊÄªÁªìÊèêÁ§∫ËØç', CONFIG.PROMPT));
    form.appendChild(createInputField('ÊÄªÁªìËØ≠Ë®Ä', 'language', 'text', 'ËØ∑ËæìÂÖ•ÊÄªÁªìËØ≠Ë®ÄÔºàÈªòËÆ§Ëá™Âä®Ôºâ', CONFIG.LANGUAGE));
    form.appendChild(createInputField('ÈáçËØïÊ¨°Êï∞', 'retry_count', 'number', 'ËØ∑ËæìÂÖ•ÈáçËØïÊ¨°Êï∞', CONFIG.RETRY_COUNT));
    form.appendChild(createInputField('ÈáçËØïÈó¥ÈöîÔºàÊØ´ÁßíÔºâ', 'retry_interval', 'number', 'ËØ∑ËæìÂÖ•ÈáçËØïÈó¥Èöî', CONFIG.RETRY_INTERVAL));

    const buttonGroup = document.createElement('div');
    buttonGroup.style.display = 'flex';
    buttonGroup.style.justifyContent = 'flex-start';
    buttonGroup.style.gap = '10px';
    buttonGroup.style.maxWidth = '1000px';
    buttonGroup.style.margin = '0 auto';
    buttonGroup.style.padding = '0 20px';
    settingsView.appendChild(buttonGroup);

    const saveButton = document.createElement('button');
    saveButton.textContent = '‰øùÂ≠òËÆæÁΩÆ';
    saveButton.style.backgroundColor = '#007BFF';
    saveButton.style.color = 'white';
    saveButton.style.border = 'none';
    saveButton.style.padding = '10px 20px';
    saveButton.style.borderRadius = '5px';
    saveButton.style.cursor = 'pointer';
    buttonGroup.appendChild(saveButton);

    const addConfigButton = document.createElement('button');
    addConfigButton.textContent = 'Ê∑ªÂä†Êñ∞ÈÖçÁΩÆ';
    addConfigButton.style.backgroundColor = '#28A745';
    addConfigButton.style.color = 'white';
    addConfigButton.style.border = 'none';
    addConfigButton.style.padding = '10px 20px';
    addConfigButton.style.borderRadius = '5px';
    addConfigButton.style.cursor = 'pointer';
    buttonGroup.appendChild(addConfigButton);

    const renameButton = document.createElement('button');
    renameButton.textContent = 'ÈáçÂëΩÂêçÈÖçÁΩÆ';
    renameButton.style.backgroundColor = '#FFC107';
    renameButton.style.color = 'white';
    renameButton.style.border = 'none';
    renameButton.style.padding = '10px 20px';
    renameButton.style.borderRadius = '5px';
    renameButton.style.cursor = 'pointer';
    buttonGroup.appendChild(renameButton);

    const deleteButton = document.createElement('button');
    deleteButton.textContent = 'Âà†Èô§ÈÖçÁΩÆ';
    deleteButton.style.backgroundColor = '#DC3545';
    deleteButton.style.color = 'white';
    deleteButton.style.border = 'none';
    deleteButton.style.padding = '10px 20px';
    deleteButton.style.borderRadius = '5px';
    deleteButton.style.cursor = 'pointer';
    buttonGroup.appendChild(deleteButton);

    const applyButton = document.createElement('button');
    applyButton.textContent = 'Â∫îÁî®ÈÖçÁΩÆ';
    applyButton.style.backgroundColor = '#17A2B8';
    applyButton.style.color = 'white';
    applyButton.style.border = 'none';
    applyButton.style.padding = '10px 20px';
    applyButton.style.borderRadius = '5px';
    applyButton.style.cursor = 'pointer';
    buttonGroup.appendChild(applyButton);

    mainButton.addEventListener('click', () => {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        if (panel.style.display === 'block') {
            applyDarkMode();
        }
    });

    summaryButton.addEventListener('click', async () => {
        try {
            const pageContent = getPageContent();
            showInfoDialog('Ê≠£Âú®ÊèêÂèñÁΩëÈ°µÂÜÖÂÆπÊÄªÁªìÔºåËØ∑Á®çÂÄô...', true, 'Â§ÑÁêÜ‰∏≠');
            const summary = await summarizeWithRetries(pageContent);
            lastSummaryMarkdown = summary;
            resultArea.innerHTML = marked.parse(summary);
            panel.style.display = 'block';
        } catch (error) {
            showErrorDialog(error.message);
        }
    });

    panelSummaryButton.addEventListener('click', async () => {
        try {
            const pageContent = getPageContent();
            showInfoDialog('Ê≠£Âú®ÊèêÂèñÁΩëÈ°µÂÜÖÂÆπ...', true, 'Â§ÑÁêÜ‰∏≠');
            const summary = await summarizeWithRetries(pageContent);
            lastSummaryMarkdown = summary;
            resultArea.innerHTML = marked.parse(summary);
        } catch (error) {
            showErrorDialog(error.message);
        }
    });

    saveButton.addEventListener('click', (event) => {
        event.preventDefault();
        const formData = new FormData(form);

        CONFIG.API_URL = formData.get('api_url');
        CONFIG.API_KEY = formData.get('api_key');
        CONFIG.MODEL = formData.get('model');
        CONFIG.MAX_TOKENS = parseInt(formData.get('max_tokens'), 10);
        CONFIG.TEMPERATURE = parseFloat(formData.get('temperature'));
        CONFIG.PROMPT = formData.get('prompt');
        CONFIG.LANGUAGE = formData.get('language');
        CONFIG.RETRY_COUNT = parseInt(formData.get('retry_count'), 10);
        CONFIG.RETRY_INTERVAL = parseInt(formData.get('retry_interval'), 10);

        CONFIGS[currentConfigName] = CONFIG;
        saveConfigs(CONFIGS);
        showInfoDialog('ËÆæÁΩÆÂ∑≤Êõ¥Êñ∞„ÄÇ', true);
    });

    addConfigButton.addEventListener('click', () => {
        showInputDialog('ËØ∑ËæìÂÖ•Êñ∞ÈÖçÁΩÆÂêçÁß∞Ôºö', `ÈÖçÁΩÆ${Object.keys(CONFIGS).length + 1}`, (newConfigName) => {
            if (newConfigName && !CONFIGS[newConfigName]) {
                CONFIGS[newConfigName] = { ...DEFAULT_CONFIG };
                currentConfigName = newConfigName;
                CONFIG = CONFIGS[currentConfigName];
                saveConfigs(CONFIGS);
                updateConfigSelect();
                updateFormFields();
                showInfoDialog('Êñ∞ÈÖçÁΩÆÂ∑≤Ê∑ªÂä†„ÄÇ', true);
            }
        });
    });

    renameButton.addEventListener('click', () => {
        if (currentConfigName !== DEFAULT_CONFIG_NAME) {
            showInputDialog('ËØ∑ËæìÂÖ•Êñ∞ÁöÑÈÖçÁΩÆÂêçÁß∞Ôºö', currentConfigName, (newName) => {
                if (newName && newName !== currentConfigName && !CONFIGS[newName]) {
                    CONFIGS[newName] = CONFIGS[currentConfigName];
                    delete CONFIGS[currentConfigName];
                    currentConfigName = newName;
                    saveConfigs(CONFIGS);
                    updateConfigSelect();
                    showInfoDialog('ÈÖçÁΩÆÂ∑≤ÈáçÂëΩÂêç„ÄÇ', true);
                }
            });
        } else {
            showInfoDialog('ÈªòËÆ§ÈÖçÁΩÆÊó†Ê≥ïÈáçÂëΩÂêç„ÄÇ', true);
        }
    });

    deleteButton.addEventListener('click', () => {
        if (currentConfigName !== DEFAULT_CONFIG_NAME) {
            showConfirmDialog(`Á°ÆÂÆöË¶ÅÂà†Èô§ÈÖçÁΩÆ "${currentConfigName}" ÂêóÔºü`, () => {
                delete CONFIGS[currentConfigName];
                currentConfigName = DEFAULT_CONFIG_NAME;
                CONFIG = CONFIGS[currentConfigName];
                saveConfigs(CONFIGS);
                updateConfigSelect();
                updateFormFields();
                showInfoDialog(`ÈÖçÁΩÆÂ∑≤Âà†Èô§ÔºåÂ∑≤ÂàáÊç¢Âà∞ÈªòËÆ§ÈÖçÁΩÆ„ÄÇ`, true);
            });
        } else {
            showInfoDialog('ÈªòËÆ§ÈÖçÁΩÆÊó†Ê≥ïÂà†Èô§„ÄÇ', true);
        }
    });

    applyButton.addEventListener('click', () => {
        setCurrentConfigName(currentConfigName);
        showInfoDialog('ÂΩìÂâçÈÖçÁΩÆÂ∑≤Â∫îÁî®Ôºå‰∏ãÊ¨°ÂêØÂä®Â∞Ü‰ΩøÁî®Ê≠§ÈÖçÁΩÆ„ÄÇ', true);
    });

    copyButton.addEventListener('click', () => {
        navigator.clipboard.writeText(lastSummaryMarkdown).then(() => {
            showInfoDialog('ÊÄªÁªìÂÜÖÂÆπÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºàMarkdownÊ†ºÂºèÔºâ„ÄÇ', true);
        }).catch(() => {
            showInfoDialog('Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§çÂà∂ÂÜÖÂÆπ„ÄÇ', true);
        });
    });

    darkModeButton.addEventListener('click', toggleDarkMode);

    function showConfigSelectDialog() {
        const dialog = document.createElement('div');
        dialog.classList.add('ai-summary-dialog');
        dialog.style.position = 'fixed';
        dialog.style.top = '50%';
        dialog.style.left = '50%';
        dialog.style.transform = 'translate(-50%, -50%)';
        dialog.style.backgroundColor = CONFIG.DARK_MODE ? '#1a1a1a' : 'white';
        dialog.style.color = CONFIG.DARK_MODE ? '#ffffff' : '#000000';
        dialog.style.padding = '20px';
        dialog.style.boxShadow = CONFIG.DARK_MODE ? 
            '0 0 10px rgba(255, 255, 255, 0.1)' : 
            '0 0 10px rgba(0, 0, 0, 0.3)';
        dialog.style.zIndex = 1002;
        dialog.style.width = '50%';
        dialog.style.maxWidth = '500px';
        dialog.style.borderRadius = '10px';
        dialog.style.textAlign = 'center';
        dialog.style.webkitBackdropFilter = 'blur(5px)';
        dialog.style.backdropFilter = 'blur(5px)';

        const dialogHeader = createPanelHeader('ÈÄâÊã©ÈÖçÁΩÆ', () => {
            dialog.remove();
        });
        dialogHeader.style.color = CONFIG.DARK_MODE ? '#ffffff' : '#000000';
        dialog.appendChild(dialogHeader);

        const configList = document.createElement('div');
        configList.style.display = 'flex';
        configList.style.flexDirection = 'column';
        configList.style.alignItems = 'center';
        configList.style.maxHeight = '200px';
        configList.style.overflowY = 'auto';
        configList.style.marginBottom = '15px';
        configList.style.padding = '10px';
        configList.style.backgroundColor = CONFIG.DARK_MODE ? '#2d2d2d' : '#f8f9fa';
        configList.style.borderRadius = '5px';

        Object.keys(CONFIGS).forEach(name => {
            const configItem = document.createElement('button');
            configItem.textContent = name;
            configItem.style.padding = '10px';
            configItem.style.marginBottom = '5px';
            configItem.style.border = `1px solid ${CONFIG.DARK_MODE ? '#404040' : '#ced4da'}`;
            configItem.style.borderRadius = '5px';
            configItem.style.width = '80%';
            configItem.style.cursor = 'pointer';
            configItem.style.transition = 'all 0.3s ease';
            
            // ËÆæÁΩÆÊåâÈíÆÈ¢úËâ≤
            if (name === currentConfigName) {
                configItem.style.backgroundColor = CONFIG.DARK_MODE ? '#404040' : '#007BFF';
                configItem.style.color = '#ffffff';
            } else {
                configItem.style.backgroundColor = CONFIG.DARK_MODE ? '#2d2d2d' : '#f8f9fa';
                configItem.style.color = CONFIG.DARK_MODE ? '#ffffff' : '#000000';
            }

            // Ê∑ªÂä†ÊÇ¨ÂÅúÊïàÊûú
            configItem.addEventListener('mouseover', () => {
                if (name !== currentConfigName) {
                    configItem.style.backgroundColor = CONFIG.DARK_MODE ? '#353535' : '#e9ecef';
                }
            });

            configItem.addEventListener('mouseout', () => {
                if (name !== currentConfigName) {
                    configItem.style.backgroundColor = CONFIG.DARK_MODE ? '#2d2d2d' : '#f8f9fa';
                }
            });

            configItem.addEventListener('click', () => {
                currentConfigName = name;
                CONFIG = CONFIGS[currentConfigName];
                updateFormFields();
                dialog.remove();
                showInfoDialog(`Â∑≤ÈÄâÊã©ÈÖçÁΩÆÔºö${name}`, true);
            });
            configList.appendChild(configItem);
        });

        // Ê∑ªÂä†Ê∏êÂÖ•ÊïàÊûú
        dialog.style.opacity = '0';
        dialog.style.transition = 'opacity 0.3s ease-in-out';
        
        dialog.appendChild(configList);
        document.body.appendChild(dialog);
        
        // Âº∫Âà∂ÈáçÁªò‰ª•Ëß¶ÂèëËøáÊ∏°ÊïàÊûú
        dialog.offsetHeight;
        dialog.style.opacity = '1';
    }

    function updateFormFields() {
        form.elements.api_url.value = CONFIG.API_URL;
        form.elements.api_key.value = CONFIG.API_KEY;
        form.elements.model.value = CONFIG.MODEL;
        form.elements.max_tokens.value = CONFIG.MAX_TOKENS;
        form.elements.temperature.value = CONFIG.TEMPERATURE;
        form.elements.prompt.value = CONFIG.PROMPT;
        form.elements.language.value = CONFIG.LANGUAGE;
        form.elements.retry_count.value = CONFIG.RETRY_COUNT;
        form.elements.retry_interval.value = CONFIG.RETRY_INTERVAL;
    }

    function showErrorDialog(message) {
        showInfoDialog(message, false, 'ÈîôËØØ');
    }

    function showInfoDialog(message, autoClose = false, title = '‰ø°ÊÅØ') {
        // ÁßªÈô§ÊâÄÊúâÁé∞ÊúâÁöÑ‰ø°ÊÅØÂºπÁ™ó
        const existingDialogs = document.querySelectorAll('.ai-summary-dialog');
        existingDialogs.forEach(dialog => dialog.remove());

        const dialog = document.createElement('div');
        dialog.classList.add('ai-summary-dialog');
        dialog.style.position = 'fixed';
        dialog.style.top = '50%';
        dialog.style.left = '50%';
        dialog.style.transform = 'translate(-50%, -50%)';
        dialog.style.backgroundColor = CONFIG.DARK_MODE ? '#1a1a1a' : 'white';
        dialog.style.color = CONFIG.DARK_MODE ? '#ffffff' : '#000000';
        dialog.style.padding = '20px';
        dialog.style.boxShadow = CONFIG.DARK_MODE ? 
            '0 0 10px rgba(255, 255, 255, 0.1)' : 
            '0 0 10px rgba(0, 0, 0, 0.3)';
        dialog.style.zIndex = 1002;
        dialog.style.width = '50%';
        dialog.style.maxWidth = '500px';
        dialog.style.borderRadius = '10px';
        dialog.style.textAlign = 'center';
        dialog.style.webkitBackdropFilter = 'blur(5px)';
        dialog.style.backdropFilter = 'blur(5px)';

        const dialogHeader = createPanelHeader(title, () => {
            dialog.style.opacity = '0';
            setTimeout(() => dialog.remove(), 300);
        });
        dialogHeader.style.color = CONFIG.DARK_MODE ? '#ffffff' : '#000000';
        dialog.appendChild(dialogHeader);

        const messagePara = document.createElement('p');
        messagePara.textContent = message;
        messagePara.style.margin = '15px 0';
        dialog.appendChild(messagePara);

        const returnButton = document.createElement('button');
        returnButton.textContent = 'ËøîÂõûÈù¢Êùø';
        returnButton.style.backgroundColor = CONFIG.DARK_MODE ? '#2d2d2d' : '#007BFF';
        returnButton.style.color = '#ffffff';
        returnButton.style.border = 'none';
        returnButton.style.padding = '10px 20px';
        returnButton.style.borderRadius = '5px';
        returnButton.style.cursor = 'pointer';
        returnButton.style.marginTop = '15px';
        returnButton.style.transition = 'background-color 0.3s';
        
        returnButton.addEventListener('mouseover', () => {
            returnButton.style.backgroundColor = CONFIG.DARK_MODE ? '#404040' : '#0056b3';
        });
        returnButton.addEventListener('mouseout', () => {
            returnButton.style.backgroundColor = CONFIG.DARK_MODE ? '#2d2d2d' : '#007BFF';
        });
        
        returnButton.addEventListener('click', () => {
            dialog.style.opacity = '0';
            setTimeout(() => {
                dialog.remove();
                panel.style.display = 'block';
            }, 300);
        });
        dialog.appendChild(returnButton);

        dialog.style.opacity = '0';
        dialog.style.transition = 'opacity 0.3s ease-in-out';
        document.body.appendChild(dialog);
        
        dialog.offsetHeight; // Âº∫Âà∂ÈáçÁªò
        dialog.style.opacity = '1';

        if (autoClose) {
            setTimeout(() => {
                dialog.style.opacity = '0';
                setTimeout(() => dialog.remove(), 300);
            }, 2700);
        }

        // Ê∑ªÂä†Ê∏ÖÁêÜÂáΩÊï∞
        return () => {
            if (document.body.contains(dialog)) {
                dialog.style.opacity = '0';
                setTimeout(() => dialog.remove(), 300);
            }
        };
    }

    function showInputDialog(title, defaultValue, callback) {
        const dialog = document.createElement('div');
        dialog.style.position = 'fixed';
        dialog.style.top = '50%';
        dialog.style.left = '50%';
        dialog.style.transform = 'translate(-50%, -50%)';
        dialog.style.backgroundColor = 'white';
        dialog.style.padding = '20px';
        dialog.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.3)';
        dialog.style.zIndex = 1002;
        dialog.style.width = '50%';
        dialog.style.borderRadius = '10px';
        dialog.style.textAlign = 'center';

        const dialogHeader = createPanelHeader(title, () => {
            dialog.remove();
        });
        dialog.appendChild(dialogHeader);

        const input = document.createElement('input');
        input.type = 'text';
        input.value = defaultValue;
        input.style.padding = '10px';
        input.style.border = '1px solid #ced4da';
        input.style.borderRadius = '5px';
        input.style.width = '80%';
        input.style.marginBottom = '15px';
        dialog.appendChild(input);

        const confirmButton = document.createElement('button');
        confirmButton.textContent = 'Á°ÆËÆ§';
        confirmButton.style.backgroundColor = '#007BFF';
        confirmButton.style.color = 'white';
        confirmButton.style.border = 'none';
        confirmButton.style.padding = '10px 20px';
        confirmButton.style.borderRadius = '5px';
        confirmButton.style.cursor = 'pointer';
        confirmButton.addEventListener('click', () => {
            callback(input.value);
            dialog.remove();
        });
        dialog.appendChild(confirmButton);

        document.body.appendChild(dialog);
    }

    function showConfirmDialog(message, callback) {
        const dialog = document.createElement('div');
        dialog.style.position = 'fixed';
        dialog.style.top = '50%';
        dialog.style.left = '50%';
        dialog.style.transform = 'translate(-50%, -50%)';
        dialog.style.backgroundColor = 'white';
        dialog.style.padding = '20px';
        dialog.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.3)';
        dialog.style.zIndex = 1002;
        dialog.style.width = '50%';
        dialog.style.borderRadius = '10px';
        dialog.style.textAlign = 'center';

        const dialogHeader = createPanelHeader('Á°ÆËÆ§', () => {
            dialog.remove();
        });
        dialog.appendChild(dialogHeader);

        const messagePara = document.createElement('p');
        messagePara.textContent = message;
        dialog.appendChild(messagePara);

        const confirmButton = document.createElement('button');
        confirmButton.textContent = 'Á°ÆËÆ§';
        confirmButton.style.backgroundColor = '#007BFF';
        confirmButton.style.color = 'white';
        confirmButton.style.border = 'none';
        confirmButton.style.padding = '10px 20px';
        confirmButton.style.borderRadius = '5px';
        confirmButton.style.cursor = 'pointer';
        confirmButton.addEventListener('click', () => {
            callback();
            dialog.remove();
        });
        dialog.appendChild(confirmButton);

        document.body.appendChild(dialog);
    }

    function getPageContent() {
        const title = document.title;
        const bodyText = document.body.innerText;
        return `${title}\n\n${bodyText}`;
    }

    async function summarizeWithRetries(content) {
        let attempts = 0;
        const cleanupDialog = showInfoDialog('Ê≠£Âú®Ëé∑ÂèñÁΩëÈ°µÂÜÖÂÆπÊÄªÁªìÔºåËØ∑Á®çÂÄô...', false, 'Â§ÑÁêÜ‰∏≠');
        
        while (attempts < CONFIG.RETRY_COUNT) {
            try {
                const summary = await summarizeContent(content);
                cleanupDialog(); // Ê∏ÖÈô§"Â§ÑÁêÜ‰∏≠"ÂØπËØùÊ°Ü
                return summary;  // ÁßªÈô§‰∫ÜÊàêÂäüÊèêÁ§∫
            } catch (error) {
                if (attempts < CONFIG.RETRY_COUNT - 1) {
                    cleanupDialog(); // Ê∏ÖÈô§‰πãÂâçÁöÑÂØπËØùÊ°Ü
                    const retryCleanup = showInfoDialog(`Á¨¨ ${attempts + 1} Ê¨°Â∞ùËØïÂ§±Ë¥•ÔºåÊ≠£Âú®ÈáçËØï...`, false, 'ÈáçËØï‰∏≠');
                    await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_INTERVAL));
                    retryCleanup();
                } else {
                    cleanupDialog(); // Ê∏ÖÈô§‰πãÂâçÁöÑÂØπËØùÊ°Ü
                    throw new Error('ÊâÄÊúâÈáçËØïÂùáÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ');
                }
            }
            attempts++;
        }
    }

    async function summarizeContent(content) {
        const languageSetting = CONFIG.LANGUAGE !== 'Ëá™Âä®' ? `ËØ∑Áî®${CONFIG.LANGUAGE}ÊÄªÁªì„ÄÇ` : '';
        const promptWithLanguage = `${CONFIG.PROMPT} ${languageSetting}`;

        const response = await new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                showInfoDialog('ËØ∑Ê±ÇË∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ', false, 'ÈîôËØØ');
                reject(new Error('ËØ∑Ê±ÇË∂ÖÊó∂'));
            }, 60000);

            GM_xmlhttpRequest({
                method: 'POST',
                url: CONFIG.API_URL,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${CONFIG.API_KEY}`
                },
                data: JSON.stringify({
                    model: CONFIG.MODEL,
                    messages: [
                        { role: 'system', content: promptWithLanguage },
                        { role: 'user', content: content }
                    ],
                    max_tokens: CONFIG.MAX_TOKENS,
                    temperature: CONFIG.TEMPERATURE
                }),
                onload: response => {
                    clearTimeout(timeout);
                    if (response.status === 429) {
                        showInfoDialog('API ËØ∑Ê±ÇÊ¨°Êï∞Ë∂ÖÈôêÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ', false, 'ÈîôËØØ');
                        reject(new Error('ËØ∑Ê±ÇÊ¨°Êï∞Â§™Â§öÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ'));
                    } else if (response.status >= 200 && response.status < 300) {
                        try {
                            const data = JSON.parse(response.responseText);
                            resolve(data);
                        } catch (e) {
                            showInfoDialog('ÊúçÂä°Âô®ÂìçÂ∫îÊ†ºÂºèÈîôËØØÔºåËØ∑ÈáçËØï„ÄÇ', false, 'ÈîôËØØ');
                            reject(new Error('Êó†Ê≥ïËß£ÊûêÂìçÂ∫î'));
                        }
                    } else {
                        showInfoDialog(`ËØ∑Ê±ÇÂ§±Ë¥•ÔºåÁä∂ÊÄÅÁ†Å: ${response.status}`, false, 'ÈîôËØØ');
                        reject(new Error(`Áä∂ÊÄÅÁ†Å: ${response.status}`));
                    }
                },
                onerror: () => {
                    clearTimeout(timeout);
                    showInfoDialog('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ', false, 'ÈîôËØØ');
                    reject(new Error('ËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊÇ®ÁöÑÁΩëÁªúËøûÊé•„ÄÇ'));
                }
            });
        });

        if (response.choices && response.choices[0] && response.choices[0].message) {
            return response.choices[0].message.content;
        } else {
            showInfoDialog('AI ÂìçÂ∫îÊ†ºÂºèÈîôËØØÔºåËØ∑ÈáçËØï„ÄÇ', false, 'ÈîôËØØ');
            throw new Error('ÂìçÂ∫îÊ†ºÂºèÈîôËØØ');
        }
    }

    function loadConfigs() {
        return GM_getValue('CONFIGS', { [DEFAULT_CONFIG_NAME]: DEFAULT_CONFIG });
    }

    function saveConfigs(configs) {
        GM_setValue('CONFIGS', configs);
    }

    function getCurrentConfigName() {
        return GM_getValue('CURRENT_CONFIG_NAME', DEFAULT_CONFIG_NAME);
    }

    function setCurrentConfigName(name) {
        GM_setValue('CURRENT_CONFIG_NAME', name);
    }

    function toggleDarkMode() {
        CONFIG.DARK_MODE = !CONFIG.DARK_MODE;
        CONFIGS[currentConfigName] = CONFIG;
        saveConfigs(CONFIGS);
        applyDarkMode();
    }

    function applyDarkMode() {
        const darkModeColors = {
            background: '#1a1a1a',
            text: '#ffffff',
            inputBg: '#2d2d2d',
            border: '#404040',
            link: '#66b3ff',
            buttonHover: '#404040'
        };

        const lightModeColors = {
            background: '#ffffff',
            text: '#000000',
            inputBg: '#ffffff',
            border: '#ced4da',
            link: '#007BFF',
            buttonHover: '#0056b3'
        };

        const colors = CONFIG.DARK_MODE ? darkModeColors : lightModeColors;

        // Êõ¥Êñ∞‰∏ªÈù¢ÊùøÊ†∑Âºè
        panel.style.backgroundColor = colors.background;
        panel.style.color = colors.text;
        panel.style.transition = 'background-color 0.3s, color 0.3s';
        panel.style.webkitBackdropFilter = 'blur(5px)'; // Safari ÊîØÊåÅ
        panel.style.backdropFilter = 'blur(5px)';

        // Êõ¥Êñ∞ÁªìÊûúÂå∫ÂüüÊ†∑Âºè
        resultArea.style.backgroundColor = colors.inputBg;
        resultArea.style.color = colors.text;
        resultArea.style.border = `1px solid ${colors.border}`;
        resultArea.style.transition = 'background-color 0.3s, color 0.3s, border-color 0.3s';

        // Êõ¥Êñ∞ÊâÄÊúâËæìÂÖ•Ê°ÜÊ†∑Âºè
        const inputs = panel.querySelectorAll('input');
        inputs.forEach(input => {
            input.style.backgroundColor = colors.inputBg;
            input.style.color = colors.text;
            input.style.border = `1px solid ${colors.border}`;
            input.style.transition = 'background-color 0.3s, color 0.3s, border-color 0.3s';
            
            // Ê∑ªÂä†ÁÑ¶ÁÇπÊ†∑Âºè
            input.addEventListener('focus', () => {
                input.style.boxShadow = CONFIG.DARK_MODE ? 
                    '0 0 0 2px rgba(102, 179, 255, 0.25)' : 
                    '0 0 0 2px rgba(0, 123, 255, 0.25)';
            });
            input.addEventListener('blur', () => {
                input.style.boxShadow = 'none';
            });
        });

        // Êõ¥Êñ∞ÊåâÈíÆÊ†∑Âºè
        const buttons = panel.querySelectorAll('button');
        buttons.forEach(button => {
            if (button !== darkModeButton) {
                button.style.transition = 'background-color 0.3s';
                
                // Ê∑ªÂä†ÊÇ¨ÂÅúÊïàÊûú
                button.addEventListener('mouseover', () => {
                    const currentBg = button.style.backgroundColor;
                    button.style.backgroundColor = colors.buttonHover;
                });
                button.addEventListener('mouseout', () => {
                    button.style.backgroundColor = button.dataset.originalBg || '';
                });
                
                // Â≠òÂÇ®ÂéüÂßãËÉåÊôØËâ≤
                button.dataset.originalBg = button.style.backgroundColor;
            }
        });

        // ÂÖ∂‰ªñÊ†∑ÂºèÊõ¥Êñ∞‰øùÊåÅ‰∏çÂèò...
        const links = panel.querySelectorAll('a');
        links.forEach(link => {
            link.style.color = colors.link;
            link.style.transition = 'color 0.3s';
        });

        const titles = panel.querySelectorAll('h3');
        titles.forEach(title => {
            title.style.color = colors.text;
            title.style.transition = 'color 0.3s';
        });

        const labels = form.querySelectorAll('label');
        labels.forEach(label => {
            label.style.color = colors.text;
            label.style.transition = 'color 0.3s';
        });

        footer.style.color = colors.text;
        footer.style.transition = 'color 0.3s';

        // Êõ¥Êñ∞ÊöóËâ≤Ê®°ÂºèÊåâÈíÆ
        darkModeButton.textContent = CONFIG.DARK_MODE ? 'ÂàáÊç¢‰∫ÆËâ≤Ê®°Âºè' : 'ÂàáÊç¢ÊöóËâ≤Ê®°Âºè';
        darkModeButton.style.backgroundColor = CONFIG.DARK_MODE ? '#404040' : '#6C757D';
    }
})();
